% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.r
\name{query}
\alias{query}
\alias{madlib}
\title{Execute Dynamic PostgreSQL Queries}
\usage{
query(query, ...)

madlib(query, ...)
}
\arguments{
\item{query}{A character string with dynamic inputs surrounded by "\%" (i.e. \code{\%<variable>\%})}

\item{...}{A named series of objects to insert into the query, these CAN be reused.
Objects of length 1 will be left as is, whereas objects of length > 1 will be surrounded with brackets.
Objects of type character will be surrounded by single quotations and objects of type numeric will be left as is.}
}
\description{
Th \code{query()} function sends a query with dynamic inputs to a PostgreSQL database, allowing loops and automated reporting.
   The \code{madlib()} function just prints the query to console after replacing dynamic inputs, useful for debugging.
}
\note{
Ensure there is a connection obejct 'conn' in your environment.
}
\examples{
query(query = "select * from table where place in \%places\% and year in \%years\%;",
       places = c('NYC', 'Vancouver', 'Hamilton'),
       years = c(2019, 2018, 2017))


query <- "
select *
from table
where place in \%places\%
and year in \%years\%
;
"
places <- c('NYC', 'Vancouver', 'Hamilton')
years <- c(2019, 2018, 2017)

query(query = query,
       places = places,
       years = years)

madlib(query = "select * from table where place in \%places\% and year in \%years\%;",
       places = c('NYC', 'Vancouver', 'Hamilton'),
       years = c(2019, 2018, 2017)) # returns a character object
}
